@using Common.Exceptions
@using Domain.ProfileSettings
@using WebApp.Controllers
@using WebApp.Extensions
@using WebApp.Views.Shared.CommonButtons
@model NotificationsViewModel

@{
    var isReadonly = (bool)ViewData[ProfileSettingsController.Mode];
    var formContainerId = Guid.NewGuid().ToString();

    var checkboxHtmlAttributes = new object();
    var checkboxReadonlyClass = "";

    if (isReadonly)
    {
        checkboxHtmlAttributes = checkboxHtmlAttributes.Merge(new { disabled = "disabled", @readonly = "readonly" });
        checkboxReadonlyClass = "m-checkbox--disabled";
    }

    object controlHtmlAttributes = new { @class = "form-control m-input" };

    if (isReadonly)
    {
        controlHtmlAttributes = controlHtmlAttributes.Merge(new { disabled = "disabled", @readonly = "readonly" });
    }
}

@await Html.RenderStatusMessageAsync()

<div id="@formContainerId">
    <form class="m-form m-form--fit m-form--label-align-right"
          data-ajax="true"
          data-ajax-method="Post"
          data-ajax-mode="replace"
          data-ajax-update="#@formContainerId"
          asp-area=""
          asp-action="@nameof(ProfileSettingsController.NotificationsSettings)"
          asp-controller="@nameof(ProfileSettingsController).ToControllerName()">

        @Html.HiddenFor(x => x.UserId)
        @Html.AntiForgeryToken()

        <div class="m-section">
            <div class="m-section__content">
                <div class="m-demo" data-code-preview="true" data-code-html="true" data-code-js="false" style="border: none">
                    <div>
                        <div class="m-stack m-stack--hor m-stack--general m-stack--demo" style="height: 400px">

                            @for (int i = 0; i < Model.Notifications.Count; i++)
                            {
                                <div class="m-stack__item">
                                    <div class="m-stack__demo-item">
                                        @Html.HiddenFor(x => Model.Notifications[i].Id)

                                        <div class="form-group m-form__group">
                                            <h3>
                                                <small class="text-muted">Notification of inbox </small>
                                                @Model.Notifications[i].FirmName
                                            </h3>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group m-form__group">
                                                <label class="m-checkbox @checkboxReadonlyClass">
                                                    @Html.EditorFor(x => Model.Notifications[i].SendNotificationsToEmail, new { htmlAttributes = checkboxHtmlAttributes })
                                                    @Html.LabelFor(x => Model.Notifications[0].SendNotificationsToEmail)
                                                    <span></span>
                                                </label>
                                            </div>
                                            <div class="form-group m-form__group">
                                                @Html.LabelFor(x => x.Notifications[0].NotificationEmail)
                                                @Html.EditorFor(x => Model.Notifications[i].NotificationEmail, new { htmlAttributes = controlHtmlAttributes })
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div style="font-size: 13px">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        </div>

        @if (!isReadonly)
        {
            <button type="submit" class="@CrudButtonsSettings.SaveStyle">Save</button>
        }
        @await Html.PartialAsync("_FormScripts")
    </form>
</div>